@page "/barrack/{barrackLevel:int}"
@inject HttpClient Http
@inject Helpers.CityIndexState CityIndexState
@inject Helpers.CityResourceState CityResourceState
@inject Helpers.UnitsOfCityState UnitsOfCityState


<div class="d-flex bd-highlight">
    <ResourceView CityIndex="@CityIndexState.Index" />
</div>
<div class="d-flex bd-highlight">
    <UnitsOfCityView CityIndex="@CityIndexState.Index" />
</div>
<section class="container">
    <div class="left-half">
        <div class="content">
            <header class="content-header">
                <h2 class="text-center">
                    Barrack
                    <span>(Level @BarrackLevel)</span>
                </h2>
            </header>
            
            <div class="box-outer">
                <div class="headline">
                    <div> Defensive units </div>
                </div>
                <div class="unit-box mt-3">
                    <div class="unit-wrapper">
                        <table class="d-inline-flex justify-content-between">
                            @foreach (var unit in _defensiveUnits)
                            {
                                <tbody>
                                    <tr>
                                        <td class="mt-2 mb-2" @onclick="() => SetSelectedUnitInfoByName(unit.name)">@unit.name</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            <img src="@unit.icon" width="34" height="34" class="mt-2 mb-2"
                                                 @onclick="() => SetSelectedUnitInfoByName(unit.name)" />
                                        </td>
                                    </tr>
                                    <tr>
                                        <td @onclick="() => SetSelectedUnitInfoByName(unit.name)">@unit.amount</td>
                                    </tr>
                                </tbody>
                            }
                        </table>
                    </div>
                </div>
                <div class="headline mt-4">
                    <div> Offensive units </div>
                </div>
                <div class="unit-box mt-3">
                    <div class="unit-wrapper">
                        <table class="d-inline-flex justify-content-between">
                            @foreach (var unit in _offensiveUnits)
                            {
                                <tbody>
                                    <tr>
                                        <td class="mt-2 mb-2" @onclick="() => SetSelectedUnitInfoByName(unit.name)">@unit.name</td>
                                    </tr>
                                    <tr>

                                        <td>
                                            <img src="@unit.icon" width="34" height="34" class="mt-2 mb-2"
                                                 @onclick="() => SetSelectedUnitInfoByName(unit.name)" />
                                        </td>
                                    </tr>
                                    <tr>
                                        <td @onclick="() => SetSelectedUnitInfoByName(unit.name)">@unit.amount</td>
                                    </tr>
                                </tbody>
                            }
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="right-half">
        @if (_selectedUnit != null)
        {
            <MudSimpleTable Style="overflow-x: auto;" Class="mt-5">
                <tbody>
                    <tr>
                        <td>Name</td>
                        <td style="min-width: 150px">@_selectedUnit.Name</td>
                    </tr>
                    <tr>
                        <td>Available at stage</td>
                        <td>@_selectedUnit.MinBarrackStage</td>
                    </tr>
                    <tr>
                        <td style="min-width: 150px">Attack point</td>
                        <td>@_selectedUnit.AttackPoint</td>
                    </tr>
                    <tr><td style="min-width: 150px">Defense points</td></tr>
                    <tr>
                        <td>Cavalry</td>
                        <td>Infantry</td>
                        <td>Archery</td>
                    </tr>
                    <tr>
                        <td> @_selectedUnit.CavalryDefensePoint</td>
                        <td> @_selectedUnit.InfantryDefensePoint</td>
                        <td> @_selectedUnit.ArcherDefensePoint</td>
                    </tr>
                    <tr><td style="min-width: 150px">Production cost</td></tr>
                    <tr>
                        <td><i class="fas fa-tree"></i></td>
                        <td><i class="fas fa-gem"></i></td>
                        <td><i class="fas fa-coins"></i></td>
                        <td><i class="fas fa-user"></i></td>
                    </tr>
                    <tr>
                        <td>@_selectedUnit.UnitCost.Wood</td>
                        <td>@_selectedUnit.UnitCost.Stone</td>
                        <td>@_selectedUnit.UnitCost.Silver</td>
                        <td>@_selectedUnit.UnitCost.Population</td>
                    </tr>
                </tbody>
            </MudSimpleTable>
            <input type="number" @bind="@_selectedAmount" @bind:event="oninput" disabled="@(_selectedUnit.MinBarrackStage > BarrackLevel)" />
        }
    </div>    
</section>

<footer class="d-flex justify-content-center mt-4">
    <span><MudIcon Icon="fas fa-tree" />  @_productionCost.Wood</span>
    <span><MudIcon Icon="fas fa-gem" />  @_productionCost.Stone</span>
    <span><MudIcon Icon="fas fa-coins" />  @_productionCost.Silver</span>
    <span><MudIcon Icon="fas fa-user" />  @_productionCost.Population</span>
</footer>

@if (CityResourceState.Wood >= _productionCost.Wood && CityResourceState.Stone >= _productionCost.Stone &&
    CityResourceState.Silver >= _productionCost.Silver && CityResourceState.Population >= _productionCost.Population)
{
    <div class="horizontal-center"><MudButton Variant="Variant.Filled" @onclick="TrainTroops">Train selected troops</MudButton></div>

}

@code { 
    [Parameter]
    public int BarrackLevel { get; set; }


    private List<(string name, int amount, string icon)> _defensiveUnits = new List<(string, int, string)>()
    {
        { ("Spearman" , 0,"/images/DefensiveUnits/Spearman.svg")},
        { ("Swordsman", 0,"/images/DefensiveUnits/Swordsman.svg")},
        { ("Archer", 0, "/images/DefensiveUnits/Archer.svg")},
        { ("Heavy Cavalry", 0, "/images/DefensiveUnits/Heavy Cavalry.svg")}
    };
    private List<(string name, int amount, string icon)> _offensiveUnits = new List<(string name, int amount, string icon)>
    {
        { ("Axe Fighter", 0, "/images/OffensiveUnits/Axe Fighter.svg")},
        { ("Light Cavalry", 0, "/images/OffensiveUnits/Light Cavalry.svg")},
        { ("Mounted Archer", 0, "/images/OffensiveUnits/Mounted Archer.svg")}
    };


    private List<Unit> _units;
    private Unit _selectedUnit;
    private Resources _productionCost = new Resources();
    private int amount = 0;
    private int _selectedAmount
    {
        get { return amount; }
        set
        {
            amount = value;
            int index;
            bool typeIsDefense = true;
            var unit = _defensiveUnits.FirstOrDefault(x => x.name.Equals(_selectedUnit.Name));
            if (unit.name == null)
            {
                unit = _offensiveUnits.First(x => x.name.Equals(_selectedUnit.Name));
                index = _offensiveUnits.IndexOf(unit);
                typeIsDefense = false;
            }
            else
                index = _defensiveUnits.IndexOf(unit);


            if (amount > unit.amount)
            {
                _productionCost.Population += (amount - unit.amount) * _selectedUnit.UnitCost.Population;
                _productionCost.Wood += (amount - unit.amount) * _selectedUnit.UnitCost.Wood;
                _productionCost.Stone += (amount - unit.amount) * _selectedUnit.UnitCost.Stone;
                _productionCost.Silver += (amount - unit.amount) * _selectedUnit.UnitCost.Silver;
            }
            else if (amount < unit.amount)
            {
                _productionCost.Population -= (unit.amount - amount) * _selectedUnit.UnitCost.Population;
                _productionCost.Wood -= (unit.amount - amount) * _selectedUnit.UnitCost.Wood;
                _productionCost.Stone -= (unit.amount - amount) * _selectedUnit.UnitCost.Stone;
                _productionCost.Silver -= (unit.amount - amount) * _selectedUnit.UnitCost.Silver;
            }

            unit.amount = value;
            if (typeIsDefense)
                _defensiveUnits[index] = unit;
            else
                _offensiveUnits[index] = unit;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var viewService = new ViewServices(Http);
        var httpResponse = await viewService.GetUnitTypes(0,20);
        var content = await httpResponse.Content.ReadFromJsonAsync<Game.Shared.Models.Response.CollectionResponse<Unit>>();
        _units = content.Records.ToList();
        if (_units.Count > 0)
            _selectedUnit = _units.First(x => x.Name.Equals("Spearman"));
    }

    private void SetSelectedUnitInfoByName(string unitName)
    {
        foreach (var item in _defensiveUnits)
        {
            if (item.name.Equals(unitName))
            {
                amount = _defensiveUnits.First(x => x.name.Equals(unitName)).amount;
                _selectedUnit = _units.FirstOrDefault(x => x.Name.Equals(unitName));
                return;
            }
        }
        foreach (var item in _offensiveUnits)
        {
            if (item.name.Equals(unitName))
            {
                amount = _offensiveUnits.First(x => x.name.Equals(unitName)).amount;
                _selectedUnit = _units.FirstOrDefault(x => x.Name.Equals(unitName));
                return;
            }
        }
    }

    private async Task TrainTroops()
    {
        var gameService = new GameServices(Http);
        UnitsOfTheCity unitsOfTheCity = UnitsOfCityState.UnitsOfTheCity;

        for (int index = 0; index < _defensiveUnits.Count(); index++)
        {
            if (_defensiveUnits[index].amount > 0)
            {
                var response = await gameService.ProduceUnits(new Game.Shared.Models.Request.UnitProductionRequest
                {
                    NameOfUnitType = _defensiveUnits[index].name,
                    Amount = _defensiveUnits[index].amount,
                    CityIndex = CityIndexState.Index
                });
                if (response.IsSuccessStatusCode)
                {
                    var item = _defensiveUnits[index];
                    item.amount = 0;
                    _defensiveUnits[index] = item;

                    switch (item.name)
                    {
                        case "Spearman":
                            unitsOfTheCity.Spearmans += _selectedAmount;
                            break;
                        case "Swordsman":
                            unitsOfTheCity.Swordsmans += _selectedAmount;
                            break;
                        case "Archer":
                            unitsOfTheCity.Archers += _selectedAmount;
                            break;
                        case "Heavy Cavalry":
                            unitsOfTheCity.HeavyCavalry += _selectedAmount;
                            break;
                        default:
                            break;
                    }
                }
            }
        }
        for (int index = 0; index < _offensiveUnits.Count(); index++)
        {
            if (_offensiveUnits[index].amount > 0)
            {
                var response = await gameService.ProduceUnits(new Game.Shared.Models.Request.UnitProductionRequest
                {
                    NameOfUnitType = _offensiveUnits[index].name,
                    Amount = _offensiveUnits[index].amount,
                    CityIndex = CityIndexState.Index
                });
                if (response.IsSuccessStatusCode)
                {
                    var item = _offensiveUnits[index];
                    item.amount = 0;
                    _offensiveUnits[index] = item;

                    switch (item.name)
                    {
                        case "Axe Fighter":
                            unitsOfTheCity.AxeFighers += _selectedAmount;
                            break;
                        case "Light Cavalry":
                            unitsOfTheCity.LightCavalry += _selectedAmount;
                            break;
                        case "Mounted Archer":
                            unitsOfTheCity.MountedArcher += _selectedAmount;
                            break;
                        default:
                            break;
                    }
                }
            }
        }
        CityResourceState.SetResourceValueAfterUpgrade(_productionCost);
        UnitsOfCityState.SetUnitsOfTheCity(unitsOfTheCity);
        ResetProductionCost();
    }

    private void ResetProductionCost()
    {
        _productionCost.Wood = 0;
        _productionCost.Stone = 0;
        _productionCost.Silver = 0;
        _productionCost.Population = 0;
    }
}


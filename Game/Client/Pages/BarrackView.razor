@page "/barrack/{barrackLevel:int}"
@inject Game.Shared.IServices.IViewService IViewService
@inject Game.Shared.IServices.IGameService IGameService
@inject Helpers.CityIndexState CityIndexState
@inject Helpers.CityResourceState CityResourceState
@inject Helpers.UnitsOfCityState UnitsOfCityState
@inject IDialogService DialogService

<div class="d-flex bd-highlight">
    <ResourceView CityIndex="@CityIndexState.Index" />
</div>
<div class="d-flex bd-highlight">
    <UnitsOfCityView CityIndex="@CityIndexState.Index" />
</div>

<div class="d-flex justify-content-center">
    <MudText Typo="Typo.h5" Class="text-center">Level @BarrackLevel Barrack</MudText>
</div>

<section class="container mb-5">
    <div class="left-half">
        <MudSimpleTable Style="width:760px;">
            <tr><MudText Typo="Typo.h6">Defensive units</MudText></tr>
            <tr>
                @foreach (var unit in _defensiveUnits)
                {

                    <td @onclick="() => SetSelectedUnitInfoByName(unit.name)">
                        <MudSimpleTable Style="width:170px;">
                            <tbody>
                                <tr>
                                    <td class="align-middle text-center"><b>@unit.name</b> <span @onclick="() => OpenInfoDialog(unit.name)"><MudIcon Icon="fas fa-question" Size="Size.Small"></MudIcon></span></td>
                                </tr>
                                <tr>
                                    <td class="align-middle">
                                        <img src="@unit.icon" width="120" height="120" class="align-middle" />
                                    </td>
                                </tr>
                                <tr>
                                    <td class="align-middle">@unit.currentAmount</td>
                                </tr>
                                <tr>
                                    <td class="align-middle">@unit.recruitmentAmount</td>
                                </tr>
                                <tr>
                                    <td class="align-middle">
                                        @if (_selectedUnit != null && _selectedUnit.Name.Equals(unit.name))
                                        {
                                            <input class="w-75" min="0" maxlength="5" type="number" @bind="@_selectedAmount" @bind:event="oninput" disabled="@(unit.minBarrackStage > BarrackLevel)" />
                                        }
                                        else
                                        {
                                            <input class="w-75" disabled />
                                        }
                                    </td>
                                </tr>
                            </tbody>
                        </MudSimpleTable>
                    </td>

                }
            </tr>
            <tr class="my-5"><MudText Typo="Typo.h6">Offensive units</MudText></tr>
            <tr>
                @foreach (var unit in _offensiveUnits)
                {

                    <td @onclick="() => SetSelectedUnitInfoByName(unit.name)">
                        <MudSimpleTable Style="width:170px;">
                            <tbody>
                                <tr>
                                    <td class="align-middle text-center"><b>@unit.name</b> <span @onclick="() => OpenInfoDialog(unit.name)"><MudIcon Icon="fas fa-question" Size="Size.Small"></MudIcon></span></td>
                                </tr>
                                <tr>
                                    <td class="align-middle">
                                        <img src="@unit.icon" width="120" height="120" class="align-middle" />
                                    </td>
                                </tr>
                                <tr>
                                    <td class="align-middle">@unit.currentAmount</td>
                                </tr>
                                <tr>
                                    <td class="align-middle">@unit.recruitmentAmount</td>
                                </tr>
                                <tr>
                                    <td class="align-middle">
                                        @if (_selectedUnit != null && _selectedUnit.Name.Equals(unit.name))
                                        {
                                            <input class="w-75" min="0" maxlength="5" type="number" @bind="@_selectedAmount" @bind:event="oninput" disabled="@(unit.minBarrackStage > BarrackLevel)" />
                                        }
                                        else
                                        {
                                            <input class="w-75" disabled />
                                        }
                                    </td>
                                </tr>
                            </tbody>
                        </MudSimpleTable>
                    </td>
                }
            </tr>
        </MudSimpleTable>
    </div>
    <div class="right-half">
        <footer class="d-flex justify-content-center mt-4">
            <span><MudIcon Icon="fas fa-tree" />  @_productionCost.Wood</span>
            <span><MudIcon Icon="fas fa-gem" />  @_productionCost.Stone</span>
            <span><MudIcon Icon="fas fa-coins" />  @_productionCost.Silver</span>
            <span><MudIcon Icon="fas fa-user" />  @_productionCost.Population</span>
        </footer>

        <MudButton Variant="Variant.Filled" @onclick="TrainTroops" Class="d-flex justify-content-center"
                   Disabled=@(CityResourceState.Wood < _productionCost.Wood ||
                                                                 CityResourceState.Stone < _productionCost.Stone ||
                                                                 CityResourceState.Silver < _productionCost.Silver ||
                                                                 CityResourceState.Population < _productionCost.Population)>Train selected troops</MudButton>
        <div class="d-flex justify-content-center mt-5">
            <RecruitQueue></RecruitQueue>
        </div>
    </div>
</section>
















<!--<div class="right-half">
     @if (_selectedUnit != null)
     {
         <MudSimpleTable Style="overflow-x: auto;" Class="mt-5">
             <tbody>
                 <tr>
                     <td>Name</td>
                     <td style="min-width: 150px">@_selectedUnit.Name</td>
                 </tr>
                 <tr>
                     <td>Available at stage</td>
                     <td>@_selectedUnit.MinBarrackStage</td>
                 </tr>
                 <tr>
                     <td style="min-width: 150px">Attack point</td>
                     <td>@_selectedUnit.AttackPoint</td>
                 </tr>
                 <tr><td style="min-width: 150px">Defense points</td></tr>
                 <tr>
                     <td>Cavalry</td>
                     <td>Infantry</td>
                     <td>Archery</td>
                 </tr>
                 <tr>
                     <td> @_selectedUnit.CavalryDefensePoint</td>
                     <td> @_selectedUnit.InfantryDefensePoint</td>
                     <td> @_selectedUnit.ArcherDefensePoint</td>
                 </tr>
                 <tr><td style="min-width: 150px">Production cost</td></tr>
                 <tr>
                     <td><i class="fas fa-tree"></i></td>
                     <td><i class="fas fa-gem"></i></td>
                     <td><i class="fas fa-coins"></i></td>
                     <td><i class="fas fa-user"></i></td>
                 </tr>
                 <tr>
                     <td>@_selectedUnit.UnitCost.Wood</td>
                     <td>@_selectedUnit.UnitCost.Stone</td>
                     <td>@_selectedUnit.UnitCost.Silver</td>
                     <td>@_selectedUnit.UnitCost.Population</td>
                 </tr>
             </tbody>
         </MudSimpleTable>
         <input type="number" @bind="@_selectedAmount" @bind:event="oninput" disabled="@(_selectedUnit.MinBarrackStage > BarrackLevel)" />
     }
</div>-->






















@code {
    [Parameter]
    public int BarrackLevel { get; set; }

    private List<(string name, int currentAmount, int recruitmentAmount, string icon, int minBarrackStage)> _defensiveUnits = new List<(string, int, int, string, int)>();

    private List<(string name, int currentAmount, int recruitmentAmount, string icon, int minBarrackStage)> _offensiveUnits = new List<(string, int, int, string, int)>();


    private List<Unit> _units;
    private Unit _selectedUnit;
    private Resources _productionCost = new Resources();
    private int amount = 0;
    private int _selectedAmount
    {
        get { return amount; }
        set
        {
            amount = value;
            int index;
            bool typeIsDefense = true;
            var unit = _defensiveUnits.FirstOrDefault(x => x.name.Equals(_selectedUnit.Name));
            if (unit.name == null)
            {
                unit = _offensiveUnits.First(x => x.name.Equals(_selectedUnit.Name));
                index = _offensiveUnits.IndexOf(unit);
                typeIsDefense = false;
            }
            else
                index = _defensiveUnits.IndexOf(unit);


            if (amount > unit.recruitmentAmount)
            {
                _productionCost.Population += (amount - unit.recruitmentAmount) * _selectedUnit.UnitCost.Population;
                _productionCost.Wood += (amount - unit.recruitmentAmount) * _selectedUnit.UnitCost.Wood;
                _productionCost.Stone += (amount - unit.recruitmentAmount) * _selectedUnit.UnitCost.Stone;
                _productionCost.Silver += (amount - unit.recruitmentAmount) * _selectedUnit.UnitCost.Silver;
            }
            else if (amount < unit.recruitmentAmount)
            {
                _productionCost.Population -= (unit.recruitmentAmount - amount) * _selectedUnit.UnitCost.Population;
                _productionCost.Wood -= (unit.recruitmentAmount - amount) * _selectedUnit.UnitCost.Wood;
                _productionCost.Stone -= (unit.recruitmentAmount - amount) * _selectedUnit.UnitCost.Stone;
                _productionCost.Silver -= (unit.recruitmentAmount - amount) * _selectedUnit.UnitCost.Silver;
            }

            unit.recruitmentAmount = value;
            if (typeIsDefense)
                _defensiveUnits[index] = unit;
            else
                _offensiveUnits[index] = unit;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var unitCollection = await IViewService.GetUnitTypes(0, 20);
        _units = unitCollection.Records.ToList();
        if (_units.Count > 0)
            _selectedUnit = _units.First(x => x.Name.Equals("Spearman"));
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        _defensiveUnits = new List<(string, int, int, string, int)>() {
            { ("Spearman", UnitsOfCityState.UnitsOfTheCity.Spearmans, 0, "/images/Units/Spearman.svg", 0)},
            { ("Swordsman",UnitsOfCityState.UnitsOfTheCity.Swordsmans, 0, "/images/Units/Swordsman.svg", 3)},
            { ("Archer",UnitsOfCityState.UnitsOfTheCity.Archers,  0, "/images/Units/Archer.svg", 9)},
            { ("Heavy Cavalry",UnitsOfCityState.UnitsOfTheCity.HeavyCavalry, 0, "/images/Units/Heavy Cavalry.svg", 21)}
        };

        _offensiveUnits = new List<(string name, int currentAmount, int recruitmentAmount, string icon, int minBarrackStage)> {

        { ("Axe Fighter", UnitsOfCityState.UnitsOfTheCity.AxeFighers, 0, "/images/Units/Axe Fighter.svg", 5)},
        { ("Light Cavalry", UnitsOfCityState.UnitsOfTheCity.LightCavalry, 0, "/images/Units/Light Cavalry.svg", 11)},
        { ("Mounted Archer", UnitsOfCityState.UnitsOfTheCity.MountedArcher, 0, "/images/Units/Mounted Archer.svg", 13)}

        };
    }

    private void OpenInfoDialog(string unitName)
    {
        var parameters = new DialogParameters();

        switch (unitName)
        {
            case "Spearman":
                parameters.Add("SelectedUnit", _units.First(x => x.Name.Equals("Spearman")));
                break;
            case "Swordsman":
                parameters.Add("SelectedUnit", _units.First(x => x.Name.Equals("Swordsman")));
                break;
            case "Archer":
                parameters.Add("SelectedUnit", _units.First(x => x.Name.Equals("Archer")));
                break;
            case "Heavy Cavalry":
                parameters.Add("SelectedUnit", _units.First(x => x.Name.Equals("Heavy Cavalry")));
                break;
            case "Axe Fighter":
                parameters.Add("SelectedUnit", _units.First(x => x.Name.Equals("Axe Fighter")));
                break;
            case "Light Cavalry":
                parameters.Add("SelectedUnit", _units.First(x => x.Name.Equals("Light Cavalry")));
                break;
            case "Mounted Archer":
                parameters.Add("SelectedUnit", _units.First(x => x.Name.Equals("Mounted Archer")));
                break;
            default:
                break;
        }

        var dialog = DialogService.Show<UnitInfoView>(string.Empty, parameters);
    }

    private void SetSelectedUnitInfoByName(string unitName)
    {
        for (int i = 0; i < _defensiveUnits.Count(); i++)
        {
            if (_defensiveUnits.ElementAt(i).name.Equals(unitName))
            {
                amount = _defensiveUnits.First(x => x.name.Equals(unitName)).recruitmentAmount;
                _selectedUnit = _units.FirstOrDefault(x => x.Name.Equals(unitName));
                var tmp = _defensiveUnits[i];
                _defensiveUnits[i] = tmp;
            }
            else
            {
                var tmp = _defensiveUnits[i];
                _defensiveUnits[i] = tmp;
            }

        }
        for (int i = 0; i < _offensiveUnits.Count(); i++)
        {
            if (_offensiveUnits.ElementAt(i).name.Equals(unitName))
            {
                amount = _offensiveUnits.First(x => x.name.Equals(unitName)).recruitmentAmount;
                _selectedUnit = _units.FirstOrDefault(x => x.Name.Equals(unitName));
                var tmp = _offensiveUnits[i];
                _offensiveUnits[i] = tmp;
            }
            else
            {
                var tmp = _offensiveUnits[i];
                _offensiveUnits[i] = tmp;
            }
        }
    }

    private async Task TrainTroops()
    {

        UnitsOfTheCity unitsOfTheCity = UnitsOfCityState.UnitsOfTheCity;

        for (int index = 0; index < _defensiveUnits.Count(); index++)
        {
            if (_defensiveUnits[index].recruitmentAmount > 0)
            {
                var response = await IGameService.ProduceUnits(new Game.Shared.Models.Request.UnitProductionRequest
                {
                    NameOfUnitType = _defensiveUnits[index].name,
                    Amount = _defensiveUnits[index].recruitmentAmount,
                    CityIndex = CityIndexState.Index
                });

                //var response = await gameService.ProduceUnits(new Game.Shared.Models.Request.UnitProductionRequest
                //{
                //    NameOfUnitType = _defensiveUnits[index].name,
                //    Amount = _defensiveUnits[index].amount,
                //    CityIndex = CityIndexState.Index
                //});
                if (response.IsSuccessStatusCode)
                {
                    var item = _defensiveUnits[index];
                    item.recruitmentAmount = 0;
                    _defensiveUnits[index] = item;

                    switch (item.name)
                    {
                        case "Spearman":
                            unitsOfTheCity.Spearmans += _selectedAmount;
                            break;
                        case "Swordsman":
                            unitsOfTheCity.Swordsmans += _selectedAmount;
                            break;
                        case "Archer":
                            unitsOfTheCity.Archers += _selectedAmount;
                            break;
                        case "Heavy Cavalry":
                            unitsOfTheCity.HeavyCavalry += _selectedAmount;
                            break;
                        default:
                            break;
                    }
                }
            }
        }
        for (int index = 0; index < _offensiveUnits.Count(); index++)
        {
            if (_offensiveUnits[index].recruitmentAmount > 0)
            {
                var response = await IGameService.ProduceUnits(new Game.Shared.Models.Request.UnitProductionRequest
                {
                    NameOfUnitType = _offensiveUnits[index].name,
                    Amount = _offensiveUnits[index].recruitmentAmount,
                    CityIndex = CityIndexState.Index
                });
                if (response.IsSuccessStatusCode)
                {
                    var item = _offensiveUnits[index];
                    item.recruitmentAmount = 0;
                    _offensiveUnits[index] = item;

                    switch (item.name)
                    {
                        case "Axe Fighter":
                            unitsOfTheCity.AxeFighers += _selectedAmount;
                            break;
                        case "Light Cavalry":
                            unitsOfTheCity.LightCavalry += _selectedAmount;
                            break;
                        case "Mounted Archer":
                            unitsOfTheCity.MountedArcher += _selectedAmount;
                            break;
                        default:
                            break;
                    }
                }
            }
        }
        CityResourceState.SetResourceValueAfterUpgrade(_productionCost);
        UnitsOfCityState.SetUnitsOfTheCity(unitsOfTheCity);
        ResetProductionCost();
    }

    private void ResetProductionCost()
    {
        _productionCost.Wood = 0;
        _productionCost.Stone = 0;
        _productionCost.Silver = 0;
        _productionCost.Population = 0;
    }
}


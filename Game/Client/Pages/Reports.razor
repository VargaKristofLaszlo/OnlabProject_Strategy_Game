@page "/Reports"
@inject Game.Shared.IServices.IViewService IViewService
@inject Helpers.CityIndexState CityIndexState
@using Game.Shared.Models.Response

<div class="d-flex bd-highlight">
    <ResourceView CityIndex="@CityIndexState.Index" />
</div>
<div class="d-flex bd-highlight">
    <UnitsOfCityView CityIndex="@CityIndexState.Index" />
</div>

@if (pageData != null)
{
    @if (pageData.Count() != 0)
    {
        <MudExpansionPanels>
            @foreach (var item in pageData)
            {
                <MudExpansionPanel Text="@GetReportHeader(item)" MaxHeight="450">
                    <MudSimpleTable Class="mt-4">

                        <thead>
                            <tr>
                                <td>Units</td>
                                <td>
                                    <img src="/images/DefensiveUnits/Spearman.svg" width="34" height="34" />
                                </td>
                                <td>
                                    <img src="/images/DefensiveUnits/Swordsman.svg" width="34" height="34" />
                                </td>
                                <td>
                                    <img src="/images/OffensiveUnits/Axe Fighter.svg" width="34" height="34" />
                                </td>
                                <td>
                                    <img src="/images/DefensiveUnits/Archer.svg" width="34" height="34" />
                                </td>
                                <td>
                                    <img src="/images/OffensiveUnits/Light Cavalry.svg" width="34" height="34" />
                                </td>
                                <td>
                                    <img src="/images/OffensiveUnits/Mounted Archer.svg" width="34" height="34" />
                                </td>
                                <td>
                                    <img src="/images/DefensiveUnits/Heavy Cavalry.svg" width="34" height="34" />
                                </td>
                                <td>
                                    <img src="/images/DefensiveUnits/Heavy Cavalry.svg" width="34" height="34" />
                                </td>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>Attacker</tr>
                            <tr>
                                <td>Amount</td>
                                <td>@item.SpearmanAttackerCountBefore</td>
                                <td>@item.SwordsmanAttackerCountBefore</td>
                                <td>@item.AxeFighterAttackerCountBefore</td>
                                <td>@item.ArcherAttackerCountBefore</td>
                                <td>@item.LightCavalryAttackerCountBefore</td>
                                <td>@item.MountedArcherAttackerCountBefore</td>
                                <td>@item.HeavyCavalryAttackerCountBefore</td>
                                <td>@item.NobleAttackerCountBefore</td>
                            </tr>
                            <tr>
                                <td>Survived</td>
                                <td style="color:red">@item.SpearmanAttackerCountAfter</td>
                                <td style="color:red">@item.SwordsmanAttackerCountAfter</td>
                                <td style="color:red">@item.AxeFighterAttackerCountAfter</td>
                                <td style="color:red">@item.ArcherAttackerCountAfter</td>
                                <td style="color:red">@item.LightCavalryAttackerCountAfter</td>
                                <td style="color:red">@item.MountedArcherAttackerCountAfter</td>
                                <td style="color:red">@item.HeavyCavalryAttackerCountAfter</td>
                                <td style="color:red">@item.NobleAttackerCountAfter</td>
                            </tr>
                            <tr>Defender</tr>
                            <tr>
                                <td>Amount</td>
                                <td>@item.SpearmanDefenderCountBefore</td>
                                <td>@item.SwordsmanDefenderCountBefore</td>
                                <td>@item.AxeFighterDefenderCountBefore</td>
                                <td>@item.ArcherDefenderCountBefore</td>
                                <td>@item.LightCavalryDefenderCountBefore</td>
                                <td>@item.MountedArcherDefenderCountBefore</td>
                                <td>@item.HeavyCavalryDefenderCountBefore</td>
                                <td>@item.NobleDefenderCountBefore</td>
                            </tr>
                            <tr>
                                <td>Survived</td>
                                <td style="color:red">@item.SpearmanDefenderCountAfter</td>
                                <td style="color:red">@item.SwordsmanDefenderCountAfter</td>
                                <td style="color:red">@item.AxeFighterDefenderCountAfter</td>
                                <td style="color:red">@item.ArcherDefenderCountAfter</td>
                                <td style="color:red">@item.LightCavalryDefenderCountAfter</td>
                                <td style="color:red">@item.MountedArcherDefenderCountAfter</td>
                                <td style="color:red">@item.HeavyCavalryDefenderCountAfter</td>
                                <td style="color:red">@item.NobleDefenderCountAfter</td>
                            </tr>
                        </tbody>
                        <tbody>
                            <tr>Stolen resources</tr>
                            <tr>
                                <td><i class="fas fa-tree"></i></td>
                                <td class="mr-2">@item.StolenWoodAmount</td>
                                <td><i class="fas fa-gem"></i></td>
                                <td class="mr-2">@item.StolenStoneAmount</td>
                                <td><i class="fas fa-coins"></i></td>
                                <td>@item.StolenSilverAmount</td>
                            </tr>
                        </tbody>
                        @if (item.Loyalty != -1)
                        {
                            <tbody>
                                <tr>
                                    <td>Loyalty</td>
                                    <td>@item.Loyalty</td>
                                </tr>
                            </tbody>
                        }

                    </MudSimpleTable>
                </MudExpansionPanel>
            }

        </MudExpansionPanels>
        <row>
            <MudText>Page size:</MudText>
            <MudButton Variant="Variant.Filled" @onclick="() => TableResize(5)">5</MudButton>
            <MudButton Variant="Variant.Filled" @onclick="() => TableResize(10)">10</MudButton>
        </row>
        <row>
            <MudButton Variant="Variant.Filled" @onclick="() => NewPage(true)" Disabled="@_disableNextButton">Next</MudButton>
            <MudButton Variant="Variant.Filled" @onclick="() => NewPage(false)" Disabled="_disablePreviousButton">Previous</MudButton>
        </row>
    }
    else
    {
        <MudText>You dont have any reports of previous fights</MudText>
    }
}




@code {
    private List<Report> pageData;
    private int _pageNumber = 1;
    private int _pageSize = 5;
    private bool _disableNextButton = false;
    private bool _disablePreviousButton = true;

    protected override async Task OnInitializedAsync()
    {
        var response = await IViewService.GetReports(_pageNumber, _pageSize);

        pageData = response.Records.ToList();

        pageData.Sort((x, y) => DateTime.Compare(x.CreationTime, y.CreationTime));
    }

    private string GetReportHeader(Report item)
    {
        var sb = new System.Text.StringBuilder();

        if (item.ReportType == ReportType.Attack)
        {
            sb.Append("Date: ")
                .Append(item.CreationTime.ToString())
                .Append("    Attacker: ")
                .Append(item.Attacker)
                .Append("    Attacking city:  ")
                .Append(item.AttackerCityName)
                .Append("    Defender: ")
                .Append(item.Defender)
                .Append("    Defending city:  ")
                .Append(item.DefendingCityName);

        }
        return sb.ToString();
    }

    private async Task TableResize(int size)
    {
        _pageNumber = 1;
        _pageSize = size;
        var response = await IViewService.GetReports(_pageNumber, size);

        pageData = response.Records.ToList();

        if (response.PagingInformations.PagesCount == _pageNumber)
            _disableNextButton = true;
        else
            _disableNextButton = false;


        pageData.Sort((x, y) => DateTime.Compare(x.CreationTime, y.CreationTime));
    }

    private async Task NewPage(bool forward)
    {
        if (forward)
            _pageNumber += 1;

        if (forward == false && _pageNumber > 1)
            _pageNumber -= 1;


        var response = await IViewService.GetReports(_pageNumber, _pageSize);

        if (response.PagingInformations.PagesCount == _pageNumber)
            _disableNextButton = true;
        else
            _disableNextButton = false;

        if (_pageNumber == 1)
            _disablePreviousButton = true;
        else
            _disablePreviousButton = false;

        pageData = response.Records.ToList();

        pageData.Sort((x, y) => DateTime.Compare(x.CreationTime, y.CreationTime));

        StateHasChanged();
    }

}

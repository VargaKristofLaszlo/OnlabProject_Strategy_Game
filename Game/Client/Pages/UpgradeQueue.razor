@inject Helpers.UpgradeQueueState UpgradeQueueState
@inject Helpers.CityIndexState CityIndexState
@implements IDisposable
@inject AuthenticationStateProvider AuthStateProvider
@inject Game.Shared.IServices.IViewService IViewService 
@inject Game.Shared.IServices.IGameService IGameService

<table>
    @foreach (var item in UpgradeQueueState.GetUpgradeQueueOfCity(CityIndexState.Index))
    {
    <tr>
        <td class="mr-2">Upgrading @item.BuildingName</td>
        <td class="mr-2">To stage @item.NewStage</td>
        <td class="mr-2">@item.UpgradeTime</td>


        @if (item.Equals(UpgradeQueueState.GetUpgradeQueueOfCity(CityIndexState.Index).Last()))
        {
            <td @onclick="() => Remove(item.JobId)">Remove</td>
        }

    </tr>
    }
    @for (int i = 0; i < 3 - UpgradeQueueState.GetUpgradeQueueOfCity(CityIndexState.Index).Count(); i++)
    {
        <tr>
            <td>Building name spaceholder</td>
            <td>Building stage placeholder</td>
            <td>Upgrade time placeholder</td>
        </tr>
    }

</table>

@code {       

  

    protected override void OnInitialized()
    {
        UpgradeQueueState.OnChange += StateHasChanged;    
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var userId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier).Value;
        await UpgradeQueueState.InitBuildingQueue(userId);
    }


    public void Dispose()
    {
        UpgradeQueueState.OnChange -= StateHasChanged;
    }

    async Task Remove(string jobId)
    {
        await UpgradeQueueState.RemoveFromQueue(jobId);

    }
}

@page "/map"

@inject HttpClient httpClient
@inject Game.Shared.IServices.IViewService IViewService
@inject Game.Shared.IServices.IGameService IGameService
@inject IDialogService DialogService
@inject Helpers.UnitsOfCityState UnitsOfCityState
@inject Helpers.CityIndexState CityIndexState


<div class="d-flex bd-highlight">
    <ResourceView CityIndex="@CityIndexState.Index" />
</div>
<div class="d-flex bd-highlight">
    <UnitsOfCityView CityIndex="@CityIndexState.Index" />
</div>
<MudTable ServerData="@(new Func<TableState, Task<TableData<CityPagingData>>>(ServerReload))"
          Dense="true" Hover="true" @ref="table">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Cities</MudText>
        <MudToolBarSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="nr_field" T="CityPagingData">City index</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="name_field" T="CityPagingData">City name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="owner_field" T="CityPagingData">Owner name</MudTableSortLabel></MudTh>
        <MudTh>Send resources</MudTh>
        <MudTh>Attack</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nr">@context.Index.</MudTd>
        <MudTd DataLabel="City name">@context.Name</MudTd>
        <MudTd DataLabel="Owner name">@context.OwnerName</MudTd>
        <MudTd DataLabel="Send resources"><span class="oi oi-transfer" @onclick="() =>OpenSendResourceDialog(context)"></span></MudTd>
        <MudTd DataLabel="Attack"><i class="fas fa-khanda" @onclick="() => OpenAttackDialog(context)"></i></MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private IEnumerable<CityPagingData> pagedData;
    private MudTable<CityPagingData> table;

    private int totalItems;
    private string searchString = null;

    /// <summary>
    /// Here we simulate getting the paged, filtered and ordered data from the server
    /// </summary>
    private async Task<TableData<CityPagingData>> ServerReload(TableState state)
    {

        var collectionResponse = await IViewService.GetOtherUsersCities(state.Page, state.PageSize);

        IEnumerable<CityPagingData> data = collectionResponse.Records;

        data = data.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.OwnerId.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.OwnerName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            return false;
        }).ToArray();


        totalItems = data.Count();
        switch (state.SortLabel)
        {
            case "nr_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Index);
                break;
            case "owner_field":
                data = data.OrderByDirection(state.SortDirection, o => o.OwnerName);
                break;
            case "name_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Name);
                break;
            case "id_field":
                data = data.OrderByDirection(state.SortDirection, o => o.OwnerId);
                break;
        }

        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<CityPagingData>() { TotalItems = totalItems, Items = pagedData };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    void OpenSendResourceDialog(CityPagingData cityPagingData)
    {
        var parameters = new DialogParameters();
        parameters.Add("CityPagingData", cityPagingData);

        var res = DialogService.Show<SendResourceDialog>($"Send resources to {cityPagingData.OwnerName}'s city", parameters: parameters);
    }

    private async Task OpenAttackDialog(CityPagingData cityPagingData)
    {
        var parameters = new DialogParameters();
        parameters.Add("CityPagingData", cityPagingData);



        var res = DialogService.Show<AttackDialog>($"Attack {cityPagingData.OwnerName}'s city", parameters: parameters);

        var dialogResult = await res.Result;

        if (dialogResult.Cancelled == false)
        {
            var gameService = new GameServices(httpClient);
            await gameService.AttackOtherCity(dialogResult.Data as Game.Shared.Models.Request.AttackRequest);


            var units = await IViewService.GetUnitsOfCity(CityIndexState.Index);

            UnitsOfCityState.SetUnitsOfTheCity(units);
        }
    }
}
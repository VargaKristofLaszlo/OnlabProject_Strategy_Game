@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Helpers.HubListener HubListener
@inject Helpers.MessageStorage MessageStorage



@if (string.IsNullOrEmpty(errorMessage) == false)
{
    <MudAlert Severity="Severity.Error">@errorMessage</MudAlert>
}
<row>
    <MudRadioGroup @bind-SelectedOption="_everyoneSelected">
        <MudRadio Option="true" Color="Color.Primary" Dense="true">Broadcast</MudRadio>
        <MudRadio Option="false" Color="Color.Secondary" Dense="false">Send private message</MudRadio>
    </MudRadioGroup>
    @if (_everyoneSelected == false)
    {
        <MudItem Class="w-25">
            <MudTextField @bind-Value="targetUserName" Label="Target" Variant="Variant.Text" Disabled=@(string.IsNullOrEmpty(errorMessage) == false)></MudTextField>
        </MudItem>
    }
</row>
<MudItem Class="w-25">
    <MudTextField @bind-Value="messageInput" Label="Message" Variant="Variant.Text" Disabled=@(string.IsNullOrEmpty(errorMessage) == false)></MudTextField>
</MudItem>
<MudButton Class="mt-3" Variant="Variant.Filled" Disabled=@(!HubListener.IsConnected) OnClick="Send">Send</MudButton>


<hr>

<div class="w-25">
    @foreach (var message in MessageStorage.Messages)
    {
        @if (senderUserName != null && senderUserName.Equals(message.senderName))
        {
            <div class="message-sender font-weight-light text-secondary">
                <MudText Align="Align.Right">@message.text</MudText>
            </div>
        }
        else
        {
            <MudText Align="Align.Left">@string.Format(message.senderName + ": " + @message.text)</MudText>
        }
    }
</div>




@code {

    private string messageInput;
    private string senderUserName;
    private string targetUserName = string.Empty;
    private string errorMessage = string.Empty;
    private bool _everyoneSelected = true;

    protected override async Task OnInitializedAsync()
    {
        var authenticatedUser = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        senderUserName = authenticatedUser.User.Claims.First(t => t.Type == System.Security.Claims.ClaimTypes.Name).Value;

        if (HubListener.Connection.State == HubConnectionState.Disconnected)
            await HubListener.StartAsync();
    }

    async Task Send()
    {
        await HubListener.Send(messageInput, targetUserName);
        messageInput = string.Empty;
    }

    protected override void OnInitialized()
    {
        HubListener.OnChange += StateHasChanged;

        HubListener.Connection.Closed += error =>
        {
            System.Diagnostics.Debug.Assert(HubListener.Connection.State == HubConnectionState.Disconnected);

            errorMessage = "Connection to the chat server could not be created.";

            return Task.CompletedTask;
        };
    }
}

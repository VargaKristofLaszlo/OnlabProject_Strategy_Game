@page "/castle"

@inject Helpers.UnitsOfCityState UnitsOfCityState
@inject Helpers.CityIndexState CityIndexState
@inject Helpers.CityDetailsState CityDetailsState
@inject Helpers.CityResourceState CityResourceState
@inject Game.Shared.IServices.IViewService IViewService
@inject Game.Shared.IServices.IGameService IGameService
@inject ISnackbar Snackbar
@using Microsoft.AspNetCore.Mvc

<div class="d-flex bd-highlight">
    <ResourceView CityIndex="@CityIndexState.Index" />
</div>
<div class="d-flex bd-highlight">
    <UnitsOfCityView CityIndex="@CityIndexState.Index" />
</div>

<section class="container">
    <header class="text-center">
        <h2>
            Castle (Level @CastleDetails.Stage)
        </h2>
    </header>
    <MudSimpleTable Style="overflow-x: auto;" Class="mt-5 mb-3">
        <tbody>
            <MudTr>
                <MudTd><MudText Typo="Typo.h6">Currently available coins</MudText></MudTd>
                <MudTd><b>@CastleDetails.AvailableCoinCount</b></MudTd>
            </MudTr>

            <MudTr>
                <MudTd><MudText Typo="Typo.h6">Number of coins you can create</MudText></MudTd>
                <MudTd><b>@CastleDetails.MaximumCoinCount</b></MudTd>
            </MudTr>
        </tbody>
        <tbody>
            <MudTr>
                <MudTd><MudText Typo="Typo.h6">Coin price</MudText></MudTd>
                <MudTd><MudIcon Icon="fas fa-tree" /></MudTd>
                <MudTd><MudIcon Icon="fas fa-gem" /></MudTd>
                <MudTd><MudIcon Icon="fas fa-coins" /></MudTd>
            </MudTr>
            <MudTr>
                <MudTd>
                    <MudButton Variant="Variant.Filled" @onclick="CreateCoinAsync">Create a coin</MudButton>
                </MudTd>
                <MudTd>@CoinCost.Wood</MudTd>
                <MudTd>@CoinCost.Stone</MudTd>
                <MudTd>@CoinCost.Silver</MudTd>
            </MudTr>
        </tbody>
        <tbody>
            <MudTr>
                <MudTd><MudText Typo="Typo.h6">Noble price</MudText></MudTd>
                <MudTd><MudIcon Icon="fas fa-tree" /></MudTd>
                <MudTd><MudIcon Icon="fas fa-gem" /></MudTd>
                <MudTd><MudIcon Icon="fas fa-coins" /></MudTd>
            </MudTr>
            <MudTr>
                <MudTd>
                    <MudButton Variant="Variant.Filled" @onclick="RecruitNobleAsync" Disabled=@(CastleDetails.AvailableCoinCount == 0)>Recruit a noble</MudButton>
                </MudTd>
                <MudTd>@NobleCost.Wood</MudTd>
                <MudTd>@NobleCost.Stone</MudTd>
                <MudTd>@NobleCost.Silver</MudTd>
            </MudTr>
        </tbody>
    </MudSimpleTable>


</section>

@code {
    public CastleDetails CastleDetails { get; set; } = new CastleDetails();
    public Resources CoinCost { get; set; } = new Resources();
    public Resources NobleCost { get; set; } = new Resources();


    protected override async Task OnInitializedAsync()
    {
        CastleDetails = await IViewService.GetCastleDetails(CityIndexState.Index);
        if (CastleDetails.MaximumCoinCount < 0)
            CastleDetails.MaximumCoinCount = 0;

        if (CastleDetails.CoinCost != null)
            CoinCost = CastleDetails.CoinCost;

        if (CastleDetails.NobleCost != null)
            NobleCost = CastleDetails.NobleCost;
    }

    private async Task CreateCoinAsync()
    {
        var response = await IGameService.CreateCoins(new Game.Shared.Models.Request.CoinCreationRequest()
        {
            Amount = 1,
            CityIndex = CityIndexState.Index
        });

        if (response.IsSuccessStatusCode)
        {
            CastleDetails.AvailableCoinCount += 1;
            CityResourceState.SetResourceValueAfterUpgrade(CastleDetails.CoinCost);
            Snackbar.Add("Coin was created", Severity.Success);

        }
        else
        {
            var responseMessage = await response.Content.ReadFromJsonAsync<ProblemDetails>();

            Snackbar.Add(responseMessage.Detail, Severity.Error);
        }
    }

    private async Task RecruitNobleAsync()
    {
        UnitsOfTheCity unitsOfTheCity = UnitsOfCityState.UnitsOfTheCity;


        var response = await IGameService.ProduceUnits(new Game.Shared.Models.Request.UnitProductionRequest()
        {
            NameOfUnitType = "Noble",
            Amount = 1,
            CityIndex = CityIndexState.Index
        });

        if (response.IsSuccessStatusCode)
        {
            unitsOfTheCity.Noble += 1;
            CastleDetails.AvailableCoinCount--;
            CastleDetails.MaximumCoinCount--;

            CityResourceState.SetResourceValueAfterUpgrade(CastleDetails.NobleCost);
            UnitsOfCityState.SetUnitsOfTheCity(unitsOfTheCity);
        }
    }
}

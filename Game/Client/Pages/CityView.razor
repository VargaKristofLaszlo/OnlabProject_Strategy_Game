@inject IDialogService DialogService
@inject Game.Shared.IServices.IViewService IViewService
@inject Helpers.CityResourceState CityResourceState
@inject Helpers.CityDetailsState CityDetailsState
@inject Helpers.UpgradeQueueState UpgradeQueueState
@inject ISnackbar Snackbar
@implements IDisposable



@if (CityDetailsState != null && CityDetailsState.CityDetails != null)
{

    <MudSimpleTable Style="overflow-x: auto;">
        <thead>
            <tr>
                @foreach (var h in headings)
                {
                    <th>@h</th>
                }
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Barrack</td>
                <td>@CityDetailsState.CityDetails.BarrackStage</td>
                <td>
                    <i class="fas fa-arrow-up" @onclick="() => OpenUpgradeDialog(
                                                             CityDetailsState.CityDetails.BarrackUpgradeCost,
                                                             CityDetailsState.CityDetails.BarrackStage,
                                                             _barrack,
                                                             CityIndex)"></i>
                </td>
                <td>
                    <i class="fas fa-arrow-down" @onclick="() => OpenDowngradeDialog(
                                                               CityDetailsState.CityDetails.BarrackStage,
                                                             _barrack,
                                                             CityIndex)"></i>
                </td>
            </tr>
            <tr>
                <td>City hall</td>
                <td>@CityDetailsState.CityDetails.CityHallStage</td>
                <td>
                    <i class="fas fa-arrow-up" @onclick="() => OpenUpgradeDialog(
                                                         CityDetailsState.CityDetails.CityHallUpgradeCost,
                                                         CityDetailsState.CityDetails.CityHallStage,
                                                         _cityHall,
                                                         CityIndex)"></i>
                </td>
                <td>
                    <i class="fas fa-arrow-down" @onclick="() => OpenDowngradeDialog(
                                                         CityDetailsState.CityDetails.CityHallStage,
                                                         _cityHall,
                                                         CityIndex)"></i>
                </td>
            </tr>
            <tr>
                <td>City wall</td>
                <td>@CityDetailsState.CityDetails.CityWallStage</td>
                <td>
                    <i class="fas fa-arrow-up" @onclick="() => OpenUpgradeDialog(
                                                         CityDetailsState.CityDetails.CityWallUpgradeCost,
                                                         CityDetailsState.CityDetails.CityWallStage,
                                                         _cityWall,
                                                         CityIndex)"></i>
                </td>
                <td>
                    <i class="fas fa-arrow-down" @onclick="() => OpenDowngradeDialog(
                                                         CityDetailsState.CityDetails.CityWallStage,
                                                         _cityWall,
                                                         CityIndex)"></i>
                </td>
            </tr>
            <tr>
                <td>Farm</td>
                <td>@CityDetailsState.CityDetails.FarmStage</td>
                <td>
                    <i class="fas fa-arrow-up" @onclick="() => OpenUpgradeDialog(
                                                         CityDetailsState.CityDetails.FarmUpgradeCost,
                                                         CityDetailsState.CityDetails.FarmStage,
                                                         _farm,
                                                         CityIndex)"></i>
                </td>
                <td>
                    <i class="fas fa-arrow-down" @onclick="() => OpenDowngradeDialog(
                                                         CityDetailsState.CityDetails.FarmStage,
                                                         _farm,
                                                         CityIndex)"></i>
                </td>
            </tr>
            <tr>
                <td>Lumber</td>
                <td>@CityDetailsState.CityDetails.LumberStage</td>
                <td>
                    <i class="fas fa-arrow-up" @onclick="() => OpenUpgradeDialog(
                                                         CityDetailsState.CityDetails.LumberUpgradeCost,
                                                         CityDetailsState.CityDetails.LumberStage,
                                                         _lumber,
                                                         CityIndex)"></i>
                </td>
                <td>
                    <i class="fas fa-arrow-down" @onclick="() => OpenDowngradeDialog(
                                                         CityDetailsState.CityDetails.LumberStage,
                                                         _lumber,
                                                         CityIndex)"></i>
                </td>
            </tr>
            <tr>
                <td>Silver mine</td>
                <td>@CityDetailsState.CityDetails.SilverMineStage</td>
                <td>
                    <i class="fas fa-arrow-up" @onclick="() => OpenUpgradeDialog(
                                                         CityDetailsState.CityDetails.SilverMineUpgradeCost,
                                                         CityDetailsState.CityDetails.SilverMineStage,
                                                         _silverMine,
                                                         CityIndex)"></i>
                </td>
                <td>
                    <i class="fas fa-arrow-down" @onclick="() => OpenDowngradeDialog(
                                                         CityDetailsState.CityDetails.SilverMineStage,
                                                         _silverMine,
                                                         CityIndex)"></i>
                </td>
            </tr>
            <tr>
                <td>Stone mine</td>
                <td>@CityDetailsState.CityDetails.StoneMineStage</td>
                <td>
                    <i class="fas fa-arrow-up" @onclick="() => OpenUpgradeDialog(
                                                         CityDetailsState.CityDetails.StoneMineUpgradeCost,
                                                         CityDetailsState.CityDetails.StoneMineStage,
                                                         _stoneMine,
                                                         CityIndex)"></i>
                </td>
                <td>
                    <i class="fas fa-arrow-down" @onclick="() => OpenDowngradeDialog(
                                                         CityDetailsState.CityDetails.StoneMineStage,
                                                         _stoneMine,
                                                         CityIndex)"></i>
                </td>
            </tr>
            <tr>
                <td>Warehouse</td>
                <td>@CityDetailsState.CityDetails.WarehouseStage</td>
                <td>
                    <i class="fas fa-arrow-up" @onclick="() => OpenUpgradeDialog(
                                                         CityDetailsState.CityDetails.WarehouseUpgradeCost,
                                                         CityDetailsState.CityDetails.WarehouseStage,
                                                         _wareHouse,
                                                         CityIndex)"></i>
                </td>
                <td>
                    <i class="fas fa-arrow-down" @onclick="() => OpenDowngradeDialog(
                                                         CityDetailsState.CityDetails.WarehouseStage,
                                                         _wareHouse,
                                                         CityIndex)"></i>
                </td>
            </tr>
        </tbody>
    </MudSimpleTable>
    <MudButton OnClick="Test">Test</MudButton>
}

@inject HttpClient http
@code {
    private async Task Test()
    {
        var response = await http.PatchAsync("Game/test/Barrack/Upgrade?cityIndex=0&newStage=1", null);
        Console.WriteLine("response.StatusCode\t" + response.StatusCode);
    }




    [Parameter]
    public int CityIndex { get; set; }
    private const string _barrack = "Barrack";
    private const string _cityHall = "CityHall";
    private const string _cityWall = "CityWall";
    private const string _farm = "Farm";
    private const string _lumber = "Lumber";
    private const string _silverMine = "SilverMine";
    private const string _stoneMine = "StoneMine";
    private const string _wareHouse = "Warehouse";

    string[] headings = { "Name", "Stage", "Upgrade", "Downgrade" };

    protected override async Task OnInitializedAsync()
    {
        var cityDetails = await IViewService.GetCityDetails(CityIndex);
        CityDetailsState.Init(cityDetails);
    }

    private async Task OpenUpgradeDialog(Resources upgradeCost, int currentStage, string buildingName, int cityIndex)
    {
        var upgradesInQueue = UpgradeQueueState.GetUpgradeStage(buildingName);
        TimeSpan upgradeTime = new TimeSpan(0,0,0);
        var costResponse = await IViewService.GetBuildingUpgradeCostsByName(buildingName);
        costResponse = costResponse.OrderBy(o => o.UpgradeCost.Wood).ToList();
        if (upgradesInQueue != 0)
        {

            try
            {
                var tmp = costResponse.ElementAt(currentStage + upgradesInQueue);
                upgradeCost = tmp.UpgradeCost;
                upgradeTime = new System.TimeSpan(0, 0, tmp.UpgradeTimeInSeconds);
            }
            catch (ArgumentOutOfRangeException)
            {
                upgradeCost = null;
            }
        }
        else
        {
            var tmp = costResponse.ElementAt(currentStage);
            upgradeTime = new System.TimeSpan(0,0,tmp.UpgradeTimeInSeconds);
        }


        var parameters = new DialogParameters();
        parameters.Add("UpgradeCost", upgradeCost);
        parameters.Add("CurrentStage", currentStage);
        parameters.Add("BuildingName", buildingName);
        parameters.Add("CityIndex", cityIndex);
        parameters.Add("UpgradeTime", upgradeTime);

        if (UpgradeQueueState.QueueIsFull(cityIndex) == true)
        {
            Snackbar.Add("Your building slots are full", Severity.Error);
            return;
        }

        var res = DialogService.Show<UpgradeDialog>($"Upgrade the {buildingName} to stage {currentStage + upgradesInQueue + 1}", parameters: parameters);

        var dialogResult = await res.Result;

        if (dialogResult.Cancelled == false)
        {
            var dialogData = dialogResult.Data as Tuple<List<Game.Shared.Models.Request.UpgradeCostCreationRequest>, string>;
            int upgradeTimeInSeconds = dialogData.Item1.ElementAt(currentStage).UpgradeTimeInSeconds;
            CityResourceState.SetResourceValueAfterUpgrade(dialogData.Item1.ElementAt(currentStage).UpgradeCost);
            var timeNow = System.DateTime.Now;
            UpgradeQueueState.AddToQueue(new Game.Shared.Models.QueueData()
            {
                CreationTime = timeNow,
                FinishTime = timeNow.Add(new System.TimeSpan(0, 0, upgradeTimeInSeconds)),
                BuildingName = buildingName,
                NewStage = currentStage + 1 + upgradesInQueue,
                CityIndex = cityIndex,
                UpgradeTime = upgradeTime,
                JobId = dialogData.Item2
            });
            StateHasChanged();
        }
    }

    private async Task OpenDowngradeDialog(int currentStage, string buildingName, int cityIndex)
    {
        if (currentStage > 0)
        {
            var parameters = new DialogParameters();
            parameters.Add("CurrentStage", currentStage);
            parameters.Add("BuildingName", buildingName);
            parameters.Add("CityIndex", cityIndex);

            var res = DialogService.Show<DowngradeDialog>($"Downgrade the {buildingName}", parameters: parameters);

            var dialogResult = await res.Result;

            if (dialogResult.Cancelled == false)
            {
                var dialogData = dialogResult.Data as SuccessfulBuildingStageModification;

                switch (buildingName)
                {
                    case _barrack:
                        CityResourceState.SetPopulation(CityResourceState.Population + dialogData.NewUpgradeCost.Population);
                        CityDetailsState.BuildingDowngrade(buildingName, dialogData.NewUpgradeCost, dialogData.NewStage);
                        break;
                    case _cityHall:
                        CityResourceState.SetPopulation(CityResourceState.Population + dialogData.NewUpgradeCost.Population);
                        CityDetailsState.BuildingDowngrade(buildingName, dialogData.NewUpgradeCost, dialogData.NewStage);
                        break;
                    case _cityWall:
                        CityResourceState.SetPopulation(CityResourceState.Population + dialogData.NewUpgradeCost.Population);
                        CityDetailsState.BuildingDowngrade(buildingName, dialogData.NewUpgradeCost, dialogData.NewStage);
                        break;
                    case _farm:
                        CityResourceState.SetPopulation(CityResourceState.Population + dialogData.NewUpgradeCost.Population);
                        CityDetailsState.BuildingDowngrade(buildingName, dialogData.NewUpgradeCost, dialogData.NewStage);
                        break;
                    case _lumber:
                        CityResourceState.SetPopulation(CityResourceState.Population + dialogData.NewUpgradeCost.Population);
                        CityDetailsState.BuildingDowngrade(buildingName, dialogData.NewUpgradeCost, dialogData.NewStage);
                        break;
                    case _silverMine:
                        CityResourceState.SetPopulation(CityResourceState.Population + dialogData.NewUpgradeCost.Population);
                        CityDetailsState.BuildingDowngrade(buildingName, dialogData.NewUpgradeCost, dialogData.NewStage);
                        break;
                    case _stoneMine:
                        CityResourceState.SetPopulation(CityResourceState.Population + dialogData.NewUpgradeCost.Population);
                        CityDetailsState.BuildingDowngrade(buildingName, dialogData.NewUpgradeCost, dialogData.NewStage);
                        break;
                    case _wareHouse:
                        CityResourceState.SetPopulation(CityResourceState.Population + dialogData.NewUpgradeCost.Population);
                        CityDetailsState.BuildingDowngrade(buildingName, dialogData.NewUpgradeCost, dialogData.NewStage);
                        var capacity = await IViewService.GetWarehouseCapacity(CityIndex);
                        CityResourceState.SetWarehouseCapacityAfterUpgrade(capacity);
                        break;

                    default:
                        break;
                }
                StateHasChanged();
            }
        }
    }

    protected override void OnInitialized()
    {
        CityDetailsState.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        CityDetailsState.OnChange -= StateHasChanged;
    }
}
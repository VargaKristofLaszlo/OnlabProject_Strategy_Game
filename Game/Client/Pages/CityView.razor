@inject IDialogService DialogService
@inject Game.Shared.IServices.IViewService IViewService
@inject Helpers.CityResourceState CityResourceState
@inject Helpers.CityDetailsState CityDetailsState
@inject Helpers.UpgradeQueueState UpgradeQueueState
@inject ISnackbar Snackbar
@implements IDisposable



@if (_buildingDisplays != null)
{
    <div class="row">
        @foreach (var item in _buildingDisplays)
        {
            <MudCard Class="col-3 mb-3 mr-1">
                <MudCardMedia Image=@String.Format($"/images/buildings/{item.buildingName}.svg")
                              Height="100"
                              Style=" width: 100px; height: 100px; margin: auto" />
                <MudCardContent>
                    <MudText Typo="Typo.h5">@item.displayName </MudText>
                    <MudText Typo="Typo.body2">Stage: @CityDetailsState.GetBuildingStage(item.buildingName)</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Filled"
                               StartIcon="fas fa-arrow-up"
                               Color="Color.Success"
                               Size="Size.Small"
                               OnClick="() => OpenUpgradeDialog(
                                                             CityDetailsState.GetBuildingUpgradeCost(item.buildingName),
                                                             CityDetailsState.GetBuildingStage(item.buildingName),
                                                             item.buildingName,
                                                             CityIndex)">Upgrade</MudButton>
                    <MudButton Variant="Variant.Filled"
                               StartIcon="fas fa-arrow-down"
                               Color="Color.Error"
                               Size="Size.Small"
                               Class="mr-0 ml-auto"
                               OnClick="() => OpenDowngradeDialog(
                                                             CityDetailsState.GetBuildingStage(item.buildingName),
                                                             item.buildingName,
                                                             CityIndex)">Downgrade</MudButton>
                </MudCardActions>
            </MudCard>

        }
    </div>
}


@code {

    [Parameter]
    public int CityIndex { get; set; }
    private const string _barrack = "Barrack";
    private const string _cityHall = "CityHall";
    private const string _cityWall = "CityWall";
    private const string _farm = "Farm";
    private const string _lumber = "Lumber";
    private const string _silverMine = "SilverMine";
    private const string _stoneMine = "StoneMine";
    private const string _wareHouse = "Warehouse";
    private const string _castle = "Castle";
    private const string _tavern = "Tavern";
    private List<(string buildingName, string displayName)> _buildingDisplays;


    string[] headings = { "Name", "Stage", "Upgrade", "Downgrade" };

    protected override async Task OnInitializedAsync()
    {
        var details = await IViewService.GetCityDetails(CityIndex);

        _buildingDisplays = new List<(string buildingName, string displayName)>() {
            ("Barrack", "Barrack"),
            ("CityHall", "City hall"),
            ("CityWall", "City wall"),
            ("Farm", "Farm"),
            ("Lumber", "Lumber"),
            ("SilverMine", "Silver mine"),
            ("StoneMine", "Stone mine"),
            ("Warehouse", "Warehouse"),
            ("Castle", "Castle"),
            ("Tavern", "Tavern")
        };

        CityDetailsState.Init(details);
    }

    private async Task OpenUpgradeDialog(Resources upgradeCost, int currentStage, string buildingName, int cityIndex)
    {
        var upgradesInQueue = UpgradeQueueState.GetUpgradeStage(buildingName);
        TimeSpan upgradeTime = new TimeSpan(0, 0, 0);
        var costResponse = await IViewService.GetBuildingUpgradeCostsByName(buildingName);
        costResponse = costResponse.OrderBy(o => o.UpgradeCost.Wood).ToList();
        try
        {
            if (upgradesInQueue != 0)
            {


                var tmp = costResponse.ElementAt(currentStage + upgradesInQueue);
                upgradeCost = tmp.UpgradeCost;
                upgradeTime = new System.TimeSpan(0, 0, tmp.UpgradeTimeInSeconds);
            }
            else
            {

                var tmp = costResponse.ElementAt(currentStage);
                upgradeTime = new System.TimeSpan(0, 0, tmp.UpgradeTimeInSeconds);
            }
        }
        catch (ArgumentOutOfRangeException)
        {
            upgradeCost = null;
        }



        var parameters = new DialogParameters();
        parameters.Add("UpgradeCost", upgradeCost);
        parameters.Add("CurrentStage", currentStage);
        parameters.Add("BuildingName", buildingName);
        parameters.Add("CityIndex", cityIndex);
        parameters.Add("UpgradeTime", upgradeTime);

        if (UpgradeQueueState.IsQueueFull(cityIndex) == true)
        {
            Snackbar.Add("Your building slots are full", Severity.Error);
            return;
        }

        var res = DialogService.Show<UpgradeDialog>($"Upgrade the {buildingName} to stage {currentStage + upgradesInQueue + 1}", parameters: parameters);

        var dialogResult = await res.Result;

        if (dialogResult.Cancelled == false)
        {
            var dialogData = dialogResult.Data as Tuple<List<Game.Shared.Models.Request.UpgradeCostCreationRequest>, string>;
            int upgradeTimeInSeconds = dialogData.Item1.ElementAt(currentStage).UpgradeTimeInSeconds;
            CityResourceState.SetResourceValueAfterUpgrade(dialogData.Item1.ElementAt(currentStage).UpgradeCost);
            var timeNow = System.DateTime.Now;
            UpgradeQueueState.AddToQueue(new Game.Shared.Models.QueueData()
            {
                CreationTime = timeNow,
                FinishTime = timeNow.Add(new System.TimeSpan(0, 0, upgradeTimeInSeconds)),
                BuildingName = buildingName,
                NewStage = currentStage + 1 + upgradesInQueue,
                CityIndex = cityIndex,
                UpgradeTime = upgradeTime,
                JobId = dialogData.Item2
            });
            StateHasChanged();
        }
    }

    private async Task OpenDowngradeDialog(int currentStage, string buildingName, int cityIndex)
    {
        if (currentStage > 0)
        {
            var parameters = new DialogParameters();
            parameters.Add("CurrentStage", currentStage);
            parameters.Add("BuildingName", buildingName);
            parameters.Add("CityIndex", cityIndex);

            var res = DialogService.Show<DowngradeDialog>($"Downgrade the {buildingName}", parameters: parameters);

            var dialogResult = await res.Result;

            if (dialogResult.Cancelled == false)
            {
                var dialogData = dialogResult.Data as SuccessfulBuildingStageModification;

                switch (buildingName)
                {
                    case _barrack:
                        CityResourceState.SetPopulation(CityResourceState.Population + dialogData.NewUpgradeCost.Population);
                        CityDetailsState.BuildingDowngrade(buildingName, dialogData.NewUpgradeCost, dialogData.NewStage);
                        break;
                    case _cityHall:
                        CityResourceState.SetPopulation(CityResourceState.Population + dialogData.NewUpgradeCost.Population);
                        CityDetailsState.BuildingDowngrade(buildingName, dialogData.NewUpgradeCost, dialogData.NewStage);
                        break;
                    case _cityWall:
                        CityResourceState.SetPopulation(CityResourceState.Population + dialogData.NewUpgradeCost.Population);
                        CityDetailsState.BuildingDowngrade(buildingName, dialogData.NewUpgradeCost, dialogData.NewStage);
                        break;
                    case _farm:
                        CityResourceState.SetPopulation(CityResourceState.Population + dialogData.NewUpgradeCost.Population);
                        CityDetailsState.BuildingDowngrade(buildingName, dialogData.NewUpgradeCost, dialogData.NewStage);
                        break;
                    case _lumber:
                        CityResourceState.SetPopulation(CityResourceState.Population + dialogData.NewUpgradeCost.Population);
                        CityDetailsState.BuildingDowngrade(buildingName, dialogData.NewUpgradeCost, dialogData.NewStage);
                        break;
                    case _silverMine:
                        CityResourceState.SetPopulation(CityResourceState.Population + dialogData.NewUpgradeCost.Population);
                        CityDetailsState.BuildingDowngrade(buildingName, dialogData.NewUpgradeCost, dialogData.NewStage);
                        break;
                    case _stoneMine:
                        CityResourceState.SetPopulation(CityResourceState.Population + dialogData.NewUpgradeCost.Population);
                        CityDetailsState.BuildingDowngrade(buildingName, dialogData.NewUpgradeCost, dialogData.NewStage);
                        break;
                    case _wareHouse:
                        CityResourceState.SetPopulation(CityResourceState.Population + dialogData.NewUpgradeCost.Population);
                        CityDetailsState.BuildingDowngrade(buildingName, dialogData.NewUpgradeCost, dialogData.NewStage);
                        var capacity = await IViewService.GetWarehouseCapacity(CityIndex);
                        CityResourceState.SetWarehouseCapacityAfterUpgrade(capacity);
                        break;
                    case _castle:
                        CityResourceState.SetPopulation(CityResourceState.Population + dialogData.NewUpgradeCost.Population);
                        CityDetailsState.BuildingDowngrade(buildingName, dialogData.NewUpgradeCost, dialogData.NewStage);
                        break;
                    case _tavern:
                        CityResourceState.SetPopulation(CityResourceState.Population + dialogData.NewUpgradeCost.Population);
                        CityDetailsState.BuildingDowngrade(buildingName, dialogData.NewUpgradeCost, dialogData.NewStage);
                        break;
                    default:
                        break;
                }
                StateHasChanged();
            }
        }
    }

    protected override void OnInitialized()
    {
        CityDetailsState.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        CityDetailsState.OnChange -= StateHasChanged;
    }
}

@inject Game.Shared.IServices.IGameService IGameService
@inject Game.Shared.IServices.IViewService IViewService 
@inject Helpers.UpgradeQueueState UpgradeQueueState
@inject Helpers.CityResourceState CityResourceState
<MudDialog>
    <DialogContent>
        <MudSimpleTable Style="overflow-x: auto;">
            @if (UpgradeCost != null)
            {
                <thead>

                    <tr>
                        <td><MudIcon Icon="fas fa-tree" /></td>
                        <td><MudIcon Icon="fas fa-gem" /></td>
                        <td><MudIcon Icon="fas fa-coins" /></td>
                        <td><MudIcon Icon="fas fa-user" /></td>
                    </tr>
                </thead>
                <tbody>
                    <tr>

                        <td>@UpgradeCost.Wood </td>
                        <td>@UpgradeCost.Stone </td>
                        <td>@UpgradeCost.Silver </td>
                        <td>@UpgradeCost.Population </td>
                    </tr>
                </tbody>
                <thead>
                    <tr>
                        <td>The upgrade time is</td>
                        <td>@UpgradeTime</td>
                    </tr>
                </thead>
            }
            else
            {
                <tr>You have already reached the highest level</tr>
            }
        </MudSimpleTable>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        @if (UpgradeCost != null)
        {
            <MudButton Color="Color.Primary" Disabled="@disableUpgrade" OnClick="Submit">Upgrade</MudButton>
        }
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public Resources UpgradeCost { get; set; }

    [Parameter]
    public int CurrentStage { get; set; }

    [Parameter]
    public string BuildingName { get; set; }

    [Parameter]
    public int CityIndex { get; set; }

    [Parameter]
    public TimeSpan UpgradeTime { get; set; }

    private List<Game.Shared.Models.Request.UpgradeCostCreationRequest> BuildingUpgradeCosts;

    private bool disableUpgrade = false;


    protected override async Task OnInitializedAsync()
    {
        BuildingUpgradeCosts = await IViewService.GetBuildingUpgradeCostsByName(BuildingName);
        BuildingUpgradeCosts = BuildingUpgradeCosts.OrderBy(o => o.UpgradeCost.Wood).ToList();

        if (UpgradeCost != null) 
            disableUpgrade = 
                CityResourceState.Wood <= UpgradeCost.Wood ||
                CityResourceState.Stone <= UpgradeCost.Stone ||
                CityResourceState.Silver <= UpgradeCost.Silver ||
                CityResourceState.Population <= UpgradeCost.Population;
    }

    async Task Submit()
    {
        var upgradesInQueue = UpgradeQueueState.GetUpgradeStage(BuildingName);

        var response = await IGameService.TestUpgradeBuilding(CityIndex, BuildingName, CurrentStage + 1 + upgradesInQueue);

        if (response.IsSuccessStatusCode)
            MudDialog.Close(DialogResult.Ok(
                new Tuple<List<Game.Shared.Models.Request.UpgradeCostCreationRequest>,string>(
                    BuildingUpgradeCosts,response.Content)));

        else
            MudDialog.Close(DialogResult.Cancel());
    }

    void Cancel() => MudDialog.Cancel();
}

@inject Game.Shared.IServices.IGameService IGameService

<MudDialog>
    <DialogContent>
        <MudSimpleTable Style="overflow-x: auto;">
            @if (UpgradeCost != null)
            {
                <thead>

                    <tr>
                        <td><MudIcon Icon="fas fa-tree" /></td>
                        <td><MudIcon Icon="fas fa-gem" /></td>
                        <td><MudIcon Icon="fas fa-coins" /></td>
                        <td><MudIcon Icon="fas fa-user" /></td>
                    </tr>
                </thead>
                <tbody>
                    <tr>

                        <td>@UpgradeCost.Wood </td>
                        <td>@UpgradeCost.Stone </td>
                        <td>@UpgradeCost.Silver </td>
                        <td>@UpgradeCost.Population </td>


                    </tr>
                </tbody>
            }
            else
            {
                <tr><p>You have already reached the highest level</p></tr>
            }
        </MudSimpleTable>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        @if (UpgradeCost != null)
        {
            <MudButton Color="Color.Primary" OnClick="Submit">Upgrade</MudButton>
        }
        </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public Resources UpgradeCost { get; set; }

    [Parameter]
    public int CurrentStage { get; set; }

    [Parameter]
    public string BuildingName { get; set; }

    [Parameter]
    public int CityIndex { get; set; }

    async Task Submit()
    {
        var response = await IGameService.UpgradeBuilding(CityIndex, BuildingName, CurrentStage + 1);

        if (response.IsSuccessStatusCode)   
            MudDialog.Close(DialogResult.Ok(response.Content));
        
        else
            MudDialog.Close(DialogResult.Cancel());
    }

    void Cancel() => MudDialog.Cancel();
}

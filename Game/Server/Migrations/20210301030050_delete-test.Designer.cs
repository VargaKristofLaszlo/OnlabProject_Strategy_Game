// <auto-generated />
using System;
using BackEnd.Models.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Game.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210301030050_delete-test")]
    partial class deletetest
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BackEnd.Models.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("BackEnd.Models.Models.Barrack", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BuildingCostId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BuildingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuildingCostId");

                    b.ToTable("Barracks");
                });

            modelBuilder.Entity("BackEnd.Models.Models.BuildingUpgradeCost", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BuildingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BuildingStage")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("UpgradeTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("BuildingUpgradeCosts");
                });

            modelBuilder.Entity("BackEnd.Models.Models.City", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BarrackId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CityHallId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CityWallId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FarmId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastResourceQueryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SilverProductionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StoneProductionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WarehouseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WoodProductionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BarrackId");

                    b.HasIndex("CityHallId");

                    b.HasIndex("CityWallId");

                    b.HasIndex("FarmId");

                    b.HasIndex("SilverProductionId")
                        .IsUnique();

                    b.HasIndex("StoneProductionId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex("WoodProductionId")
                        .IsUnique();

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("BackEnd.Models.Models.CityHall", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BuildingCostId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BuildingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stage")
                        .HasColumnType("int");

                    b.Property<int>("UpgradeTimeReductionPercent")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuildingCostId");

                    b.ToTable("CityHalls");
                });

            modelBuilder.Entity("BackEnd.Models.Models.CityWall", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BuildingCostId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BuildingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DefensePoints")
                        .HasColumnType("int");

                    b.Property<int>("Stage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuildingCostId");

                    b.ToTable("CityWalls");
                });

            modelBuilder.Entity("BackEnd.Models.Models.Farm", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BuildingCostId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BuildingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxPopulation")
                        .HasColumnType("int");

                    b.Property<int>("Stage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuildingCostId");

                    b.ToTable("Farms");
                });

            modelBuilder.Entity("BackEnd.Models.Models.MaxBuildingStage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BuildingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxStage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MaxBuildingStages");
                });

            modelBuilder.Entity("BackEnd.Models.Models.ResourceProduction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BuildingCostId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BuildingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductionAmount")
                        .HasColumnType("int");

                    b.Property<int>("ResourceType")
                        .HasColumnType("int");

                    b.Property<int>("Stage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuildingCostId");

                    b.ToTable("ResourceProductions");
                });

            modelBuilder.Entity("BackEnd.Models.Models.Unit", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ArcherDefensePoint")
                        .HasColumnType("int");

                    b.Property<int>("AttackPoint")
                        .HasColumnType("int");

                    b.Property<int>("CarryingCapacity")
                        .HasColumnType("int");

                    b.Property<int>("CavalryDefensePoint")
                        .HasColumnType("int");

                    b.Property<int>("InfantryDefensePoint")
                        .HasColumnType("int");

                    b.Property<int>("MinBarrackStage")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("BackEnd.Models.Models.UnitsInCity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("BarrackId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UnitId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BarrackId");

                    b.HasIndex("UnitId");

                    b.ToTable("UnitsInCities");
                });

            modelBuilder.Entity("BackEnd.Models.Models.Warehouse", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BuildingCostId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BuildingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxSilverStorageCapacity")
                        .HasColumnType("int");

                    b.Property<int>("MaxStoneStorageCapacity")
                        .HasColumnType("int");

                    b.Property<int>("MaxWoodStorageCapacity")
                        .HasColumnType("int");

                    b.Property<int>("Stage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuildingCostId");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BackEnd.Models.Models.Barrack", b =>
                {
                    b.HasOne("BackEnd.Models.Models.BuildingUpgradeCost", "UpgradeCost")
                        .WithMany()
                        .HasForeignKey("BuildingCostId");

                    b.Navigation("UpgradeCost");
                });

            modelBuilder.Entity("BackEnd.Models.Models.BuildingUpgradeCost", b =>
                {
                    b.OwnsOne("BackEnd.Models.Models.Resources", "UpgradeCost", b1 =>
                        {
                            b1.Property<string>("BuildingUpgradeCostId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Population")
                                .HasColumnType("int");

                            b1.Property<int>("Silver")
                                .HasColumnType("int");

                            b1.Property<int>("Stone")
                                .HasColumnType("int");

                            b1.Property<int>("Wood")
                                .HasColumnType("int");

                            b1.HasKey("BuildingUpgradeCostId");

                            b1.ToTable("BuildingUpgradeCosts");

                            b1.WithOwner()
                                .HasForeignKey("BuildingUpgradeCostId");
                        });

                    b.Navigation("UpgradeCost")
                        .IsRequired();
                });

            modelBuilder.Entity("BackEnd.Models.Models.City", b =>
                {
                    b.HasOne("BackEnd.Models.Models.Barrack", "Barrack")
                        .WithMany()
                        .HasForeignKey("BarrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.Models.CityHall", "CityHall")
                        .WithMany()
                        .HasForeignKey("CityHallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.Models.CityWall", "CityWall")
                        .WithMany()
                        .HasForeignKey("CityWallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.Models.Farm", "Farm")
                        .WithMany()
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.Models.ResourceProduction", "SilverProduction")
                        .WithOne()
                        .HasForeignKey("BackEnd.Models.Models.City", "SilverProductionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.Models.ResourceProduction", "StoneProduction")
                        .WithOne()
                        .HasForeignKey("BackEnd.Models.Models.City", "StoneProductionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.Models.ApplicationUser", "User")
                        .WithMany("Cities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.Models.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.Models.ResourceProduction", "WoodProduction")
                        .WithOne()
                        .HasForeignKey("BackEnd.Models.Models.City", "WoodProductionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.OwnsOne("BackEnd.Models.Models.Resources", "Resources", b1 =>
                        {
                            b1.Property<string>("CityId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Population")
                                .HasColumnType("int");

                            b1.Property<int>("Silver")
                                .HasColumnType("int");

                            b1.Property<int>("Stone")
                                .HasColumnType("int");

                            b1.Property<int>("Wood")
                                .HasColumnType("int");

                            b1.HasKey("CityId");

                            b1.ToTable("Cities");

                            b1.WithOwner()
                                .HasForeignKey("CityId");
                        });

                    b.Navigation("Barrack");

                    b.Navigation("CityHall");

                    b.Navigation("CityWall");

                    b.Navigation("Farm");

                    b.Navigation("Resources")
                        .IsRequired();

                    b.Navigation("SilverProduction");

                    b.Navigation("StoneProduction");

                    b.Navigation("User");

                    b.Navigation("Warehouse");

                    b.Navigation("WoodProduction");
                });

            modelBuilder.Entity("BackEnd.Models.Models.CityHall", b =>
                {
                    b.HasOne("BackEnd.Models.Models.BuildingUpgradeCost", "UpgradeCost")
                        .WithMany()
                        .HasForeignKey("BuildingCostId");

                    b.Navigation("UpgradeCost");
                });

            modelBuilder.Entity("BackEnd.Models.Models.CityWall", b =>
                {
                    b.HasOne("BackEnd.Models.Models.BuildingUpgradeCost", "UpgradeCost")
                        .WithMany()
                        .HasForeignKey("BuildingCostId");

                    b.Navigation("UpgradeCost");
                });

            modelBuilder.Entity("BackEnd.Models.Models.Farm", b =>
                {
                    b.HasOne("BackEnd.Models.Models.BuildingUpgradeCost", "UpgradeCost")
                        .WithMany()
                        .HasForeignKey("BuildingCostId");

                    b.Navigation("UpgradeCost");
                });

            modelBuilder.Entity("BackEnd.Models.Models.ResourceProduction", b =>
                {
                    b.HasOne("BackEnd.Models.Models.BuildingUpgradeCost", "UpgradeCost")
                        .WithMany()
                        .HasForeignKey("BuildingCostId");

                    b.Navigation("UpgradeCost");
                });

            modelBuilder.Entity("BackEnd.Models.Models.Unit", b =>
                {
                    b.OwnsOne("BackEnd.Models.Models.Resources", "UnitCost", b1 =>
                        {
                            b1.Property<string>("UnitId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Population")
                                .HasColumnType("int");

                            b1.Property<int>("Silver")
                                .HasColumnType("int");

                            b1.Property<int>("Stone")
                                .HasColumnType("int");

                            b1.Property<int>("Wood")
                                .HasColumnType("int");

                            b1.HasKey("UnitId");

                            b1.ToTable("Units");

                            b1.WithOwner()
                                .HasForeignKey("UnitId");
                        });

                    b.Navigation("UnitCost")
                        .IsRequired();
                });

            modelBuilder.Entity("BackEnd.Models.Models.UnitsInCity", b =>
                {
                    b.HasOne("BackEnd.Models.Models.Barrack", "Barrack")
                        .WithMany("UnitsInCity")
                        .HasForeignKey("BarrackId");

                    b.HasOne("BackEnd.Models.Models.Unit", "Unit")
                        .WithMany("UnitsInCity")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Barrack");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("BackEnd.Models.Models.Warehouse", b =>
                {
                    b.HasOne("BackEnd.Models.Models.BuildingUpgradeCost", "UpgradeCost")
                        .WithMany()
                        .HasForeignKey("BuildingCostId");

                    b.Navigation("UpgradeCost");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BackEnd.Models.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BackEnd.Models.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BackEnd.Models.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackEnd.Models.Models.ApplicationUser", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("BackEnd.Models.Models.Barrack", b =>
                {
                    b.Navigation("UnitsInCity");
                });

            modelBuilder.Entity("BackEnd.Models.Models.Unit", b =>
                {
                    b.Navigation("UnitsInCity");
                });
#pragma warning restore 612, 618
        }
    }
}
